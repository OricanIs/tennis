<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2015-2015 by Shanghai shootbox Information Technology Co., Ltd.
  ~ Create: 2016/11/23 2:10:24
  ~ Project: viewlife
  ~ File: applicationContext.xml
  ~ Class: applicationContext.xml
  ~ Module: viewlife
  ~ Author: Administrator
  ~ Version: 1.0
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <!-- 引入外部文件jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 数据源配置 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <!--  设置JDBC驱动名称 -->
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <!-- 设置JDBC连接URL -->
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <!-- 设置数据库用户名 -->
        <property name="user" value="${jdbc.user}"/>
        <!-- 设置数据库密码 -->
        <property name="password" value="${jdbc.password}"/>
        <!-- 设置连接池初始值 -->
        <!--连接池中保留的最大连接数。默认值: 15 -->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <!-- 连接池中保留的最小连接数，默认为：3-->
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>

        <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />

        <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>

        <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>

        <!--重新尝试的时间间隔，默认为：1000毫秒-->
        <property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}" />

        <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
        <property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"/>

        <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->
        <property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}" />

        <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
        <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->
        <property name="maxStatements" value="${jdbc.maxStatements}"/>
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
        <property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"/>

    </bean>
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="configLocation"
                  value="classpath:hibernate.cfg.xml">
        </property>

        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- hibernate相关配置 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQL5Dialect
                </prop>
                <prop key="hibernate.show_sql">true</prop> <!-- 控制台上打印SQL -->
                <prop key="hibernate.format_sql">true</prop> <!-- 控制台输出时，对SQL语句格式化 -->
                <prop key="current_session_context_class">thread</prop>
            </props>
        </property>
    </bean>


    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 通知 -->
    <aop:aspectj-autoproxy />
    <aop:config>

        <aop:pointcut id="interceptorPointCutsService"
                      expression="execution(* com.tennis.service..*.*(..))"/>


        <aop:advisor advice-ref="myadvice"
                     pointcut-ref="interceptorPointCutsService"/>
    </aop:config>


    <tx:advice id="myadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="firstResult" read-only="true"/>
            <tx:method name="uniqueResult" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


    <!--轮询程序start-->
    <!--每天的凌晨十二点十分和中午十二点半进行订单统计 中午十二点半主要是校验是否在凌晨进行过订单统计,如果统计过,那么就不用统计,否则,就做统计操作-->
    <bean id="pollingAction" class="com.tennis.action.app.PollingAction">
        <property name="matchService" ref="matchService"/>
    </bean>


    <task:scheduled-tasks scheduler="myScheduler">
        <task:scheduled ref="pollingAction" method="matchPolling" cron="0/60 * * * * *"/>
        <!--每天一点 十三点 十九点-->
        <!--<task:scheduled ref="pollingAction" method="matchPolling" cron="0 0 1 * * ?"></task:scheduled>-->
    </task:scheduled-tasks>
    <task:scheduler id="myScheduler" pool-size="10"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <import resource="classpath:beans.xml"></import>
    <import resource="classpath:beans-action.xml"></import>
</beans>